        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:Max Moffett 
        -:    3:Cardtest4.c - outpost
        -:    4:*/
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include <string.h>
        -:    9:#include <stdio.h>
        -:   10:#include <assert.h>
        -:   11:#include "rngs.h"
        -:   12:#include <stdlib.h>
        -:   13:
        -:   14:#define TESTCARD "outpost"
        -:   15:
        -:   16:int main()
        -:   17:{
        -:   18:	
        1:   19:	int seed = 20;
        1:   20:	int numPlayers = 2;
        1:   21:	int choice1 = 0, choice2 = 0, choice3 = 0, handpos = 0, bonus = 0;
        -:   22:	struct gameState G, testG;
        1:   23:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   24:			sea_hag, tribute, smithy, council_room};
        -:   25:	
        -:   26:	//printf("first test:%d, testG.handCount[testG.whoseTurn])
        1:   27:	printf("--------- Testing Card: %s ---------\n", TESTCARD);
        -:   28:	
        1:   29:	initializeGame(numPlayers, k, seed, &G);
        1:   30:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   31:
        1:   32:	printf("Player 1 hand count before playing Outpost = %d, expected = %d\n", testG.handCount[testG.whoseTurn], G.handCount[G.whoseTurn]);
        -:   33:
        1:   34:	printf("Played cards before playing Outpost = %d \n", testG.playedCardCount);
        -:   35:
        1:   36:	printf("Outpost played count before playing Outpost = %d \n", testG.outpostPlayed);
        -:   37:	
        1:   38:	printf("--------- Playing Outpost card ---------\n"); 
        -:   39:
        1:   40:	cardEffect(outpost, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   41:
        1:   42:	printf("Played cards after: %d , expected = %d \n", testG.playedCardCount, (G.playedCardCount +1));
        1:   43:	if (testG.playedCardCount != G.playedCardCount+1)
    #####:   44:		{printf("---Test failed! Wrong # of cards in played pile!---\n");}
        1:   45:	else printf("---Test passed!---\n"); 
        -:   46:
        1:   47:	printf("Player 1 hand count = %d, expected = %d\n", testG.handCount[testG.whoseTurn],  G.handCount[G.whoseTurn] -1);
        1:   48:	if (testG.handCount[testG.whoseTurn] != G.handCount[G.whoseTurn] -1)
    #####:   49:		{printf("---Test failed! Player 1's hand count incorrect!---\n");}
        -:   50:
        1:   51:	printf("Player 2 hand count =%d, expected = %d \n", testG.handCount[1], G.handCount[1]);
        1:   52:	if (testG.handCount[1] != G.handCount[1])
    #####:   53:		{printf("Test failed, Player 2's hand modified!\n");}
        1:   54:	else printf("Test passed!\n");
        -:   55:
        1:   56:	printf("Game state Outpost played count = %d, expected = %d\n", testG.outpostPlayed, G.outpostPlayed + 1);
        1:   57:	if (testG.outpostPlayed != G.outpostPlayed + 1)
        1:   58:	{printf("---Test failed! Incorrect Outpost counter!---\n");}
    #####:   59:	else printf("---Test passed!---\n");
        -:   60:
        1:   61:	printf("--------- %s Testing Complete ---------\n\n", TESTCARD);
        -:   62:	
        1:   63:	return 0;
        -:   64:}
