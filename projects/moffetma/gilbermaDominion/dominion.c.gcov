        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
    42896:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    42896:   11:  if (*(int*)a < *(int*)b)
    15320:   12:    return -1;
    27576:   13:  return 0;
    42896:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37://CARD REFACTOR IMPLEMENTATION
        -:   38:int adventurerEffect(struct gameState *state, int currentPlayer, int drawntreasure, int cardDrawn, int temphand[], int z)
        -:   39:{
        -:   40:	//flipped equivalency check
     2002:   41:	while (drawntreasure > 2) {
    #####:   42:		if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:   43:			shuffle(currentPlayer, state);
    #####:   44:		}
    #####:   45:		drawCard(currentPlayer, state);
    #####:   46:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:   47:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:   48:			drawntreasure++;
        -:   49:		else {
    #####:   50:			temphand[z] = cardDrawn;
    #####:   51:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   52:			z++;
        -:   53:		}
        -:   54:	}
     2002:   55:	while (z - 1 >= 0) {
    #####:   56:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:   57:		z = z - 1;
        -:   58:	}
     1001:   59:	return 0;
        -:   60:}
        -:   61:
        -:   62:int smithyEffect(struct gameState *state, int currentPlayer, int handPos)
        -:   63:{
        -:   64:	int i;
        -:   65:	//Will run an additional time
       10:   66:	for (i = 0; i <= 3; i++)
        -:   67:	{
        4:   68:		drawCard(currentPlayer, state);
        4:   69:	}
        -:   70:	
        1:   71:	discardCard(handPos, currentPlayer, state, 0);
        1:   72:	return 0;
        -:   73:}
        -:   74:
        -:   75:int villageEffect(struct gameState *state, int currentPlayer, int handPos)
        -:   76:{
        -:   77:	//+1 Card
     1001:   78:	drawCard(currentPlayer, state);
        -:   79:
        -:   80:	//+2 Actions
     1001:   81:	state->numActions = state->numActions + 2;
        -:   82:
        -:   83:	//Card will get trashed instead of discarded
        -:   84:	//discard played card from hand
     1001:   85:	discardCard(handPos, currentPlayer, state, 1);
     1001:   86:	return 0;
        -:   87:}
        -:   88:
        -:   89:int stewardEffect(struct gameState *state, int choice1, int choice2, int choice3, int currentPlayer, int handPos)
        -:   90:{
        -:   91:	//If choice is two, both effects will happen, otherwise only discard will
    #####:   92:	if (choice1 == 2)
        -:   93:	{
        -:   94:		//+2 cards
    #####:   95:		drawCard(currentPlayer, state);
    #####:   96:		drawCard(currentPlayer, state);
    #####:   97:	}
    #####:   98:	else if (choice1 == 2)
        -:   99:	{
        -:  100:		//+2 coins
    #####:  101:		state->coins = state->coins + 2;
    #####:  102:	}
        -:  103:	else
        -:  104:	{
        -:  105:		//trash 2 cards in hand
    #####:  106:		discardCard(choice2, currentPlayer, state, 1);
    #####:  107:		discardCard(choice3, currentPlayer, state, 1);
        -:  108:	}
        -:  109:
        -:  110:	//discard card from hand
    #####:  111:	discardCard(handPos, currentPlayer, state, 0);
    #####:  112:	return 0;
        -:  113:}
        -:  114:
        -:  115:int outpostEffect(struct gameState *state, int currentPlayer, int handPos)
        -:  116:{
        -:  117:	//set outpost flag
     1001:  118:	state->outpostPlayed--;
        -:  119:
        -:  120:	//discard card
     1001:  121:	discardCard(handPos, currentPlayer, state, 0);
     1001:  122:	return 0;
        -:  123:}
        -:  124:
        -:  125:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  126:		   struct gameState *state) {
        -:  127:
        -:  128:  int i;
        -:  129:  int j;
        -:  130:  int it;			
        -:  131:  //set up random number generator
     1004:  132:  SelectStream(1);
     1004:  133:  PutSeed((long)randomSeed);
        -:  134:  
        -:  135:  //check number of players
     2008:  136:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  137:    {
    #####:  138:      return -1;
        -:  139:    }
        -:  140:
        -:  141:  //set number of players
     1004:  142:  state->numPlayers = numPlayers;
        -:  143:
        -:  144:  //check selected kingdom cards are different
    22088:  145:  for (i = 0; i < 10; i++)
        -:  146:    {
   220880:  147:      for (j = 0; j < 10; j++)
        -:  148:        {
   190760:  149:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  150:	    {
    #####:  151:	      return -1;
        -:  152:	    }
   100400:  153:        }
    10040:  154:    }
        -:  155:
        -:  156:
        -:  157:  //initialize supply
        -:  158:  ///////////////////////////////
        -:  159:
        -:  160:  //set number of Curse cards
     1004:  161:  if (numPlayers == 2)
        -:  162:    {
      312:  163:      state->supplyCount[curse] = 10;
      312:  164:    }
      692:  165:  else if (numPlayers == 3)
        -:  166:    {
      328:  167:      state->supplyCount[curse] = 20;
      328:  168:    }
        -:  169:  else
        -:  170:    {
      364:  171:      state->supplyCount[curse] = 30;
        -:  172:    }
        -:  173:
        -:  174:  //set number of Victory cards
     1004:  175:  if (numPlayers == 2)
        -:  176:    {
      312:  177:      state->supplyCount[estate] = 8;
      312:  178:      state->supplyCount[duchy] = 8;
      312:  179:      state->supplyCount[province] = 8;
      312:  180:    }
        -:  181:  else
        -:  182:    {
      692:  183:      state->supplyCount[estate] = 12;
      692:  184:      state->supplyCount[duchy] = 12;
      692:  185:      state->supplyCount[province] = 12;
        -:  186:    }
        -:  187:
        -:  188:  //set number of Treasure cards
     1004:  189:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1004:  190:  state->supplyCount[silver] = 40;
     1004:  191:  state->supplyCount[gold] = 30;
        -:  192:
        -:  193:  //set number of Kingdom cards
    42168:  194:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  195:    {
   331320:  196:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  197:	{
   155620:  198:	  if (kingdomCards[j] == i)
        -:  199:	    {
        -:  200:	      //check if card is a 'Victory' Kingdom card
    20080:  201:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  202:		{
    #####:  203:		  if (numPlayers == 2){ 
    #####:  204:		    state->supplyCount[i] = 8; 
    #####:  205:		  }
    #####:  206:		  else{ state->supplyCount[i] = 12; }
    #####:  207:		}
        -:  208:	      else
        -:  209:		{
    10040:  210:		  state->supplyCount[i] = 10;
        -:  211:		}
    10040:  212:	      break;
        -:  213:	    }
        -:  214:	  else    //card is not in the set choosen for the game
        -:  215:	    {
   145580:  216:	      state->supplyCount[i] = -1;
        -:  217:	    }
   145580:  218:	}
        -:  219:
    20080:  220:    }
        -:  221:
        -:  222:  ////////////////////////
        -:  223:  //supply intilization complete
        -:  224:
        -:  225:  //set player decks
     8136:  226:  for (i = 0; i < numPlayers; i++)
        -:  227:    {
     3064:  228:      state->deckCount[i] = 0;
    24512:  229:      for (j = 0; j < 3; j++)
        -:  230:	{
     9192:  231:	  state->deck[i][j] = estate;
     9192:  232:	  state->deckCount[i]++;
     9192:  233:	}
    49024:  234:      for (j = 3; j < 10; j++)
        -:  235:	{
    21448:  236:	  state->deck[i][j] = copper;
    21448:  237:	  state->deckCount[i]++;		
    21448:  238:	}
     3064:  239:    }
        -:  240:
        -:  241:  //shuffle player decks
     8136:  242:  for (i = 0; i < numPlayers; i++)
        -:  243:    {
     3064:  244:      if ( shuffle(i, state) < 0 )
        -:  245:	{
    #####:  246:	  return -1;
        -:  247:	}
     3064:  248:    }
        -:  249:
        -:  250:  //draw player hands
     8136:  251:  for (i = 0; i < numPlayers; i++)
        -:  252:    {  
        -:  253:      //initialize hand size to zero
     3064:  254:      state->handCount[i] = 0;
     3064:  255:      state->discardCount[i] = 0;
        -:  256:      //draw 5 cards
        -:  257:      // for (j = 0; j < 5; j++)
        -:  258:      //	{
        -:  259:      //	  drawCard(i, state);
        -:  260:      //	}
     3064:  261:    }
        -:  262:  
        -:  263:  //set embargo tokens to 0 for all supply piles
    56224:  264:  for (i = 0; i <= treasure_map; i++)
        -:  265:    {
    27108:  266:      state->embargoTokens[i] = 0;
    27108:  267:    }
        -:  268:
        -:  269:  //initialize first player's turn
     1004:  270:  state->outpostPlayed = 0;
     1004:  271:  state->phase = 0;
     1004:  272:  state->numActions = 1;
     1004:  273:  state->numBuys = 1;
     1004:  274:  state->playedCardCount = 0;
     1004:  275:  state->whoseTurn = 0;
     1004:  276:  state->handCount[state->whoseTurn] = 0;
        -:  277:  //int it; move to top
        -:  278:
        -:  279:  //Moved draw cards to here, only drawing at the start of a turn
    12048:  280:  for (it = 0; it < 5; it++){
     5020:  281:    drawCard(state->whoseTurn, state);
     5020:  282:  }
        -:  283:
     1004:  284:  updateCoins(state->whoseTurn, state, 0);
        -:  285:
     1004:  286:  return 0;
     1004:  287:}
        -:  288:
        -:  289:int shuffle(int player, struct gameState *state) {
        -:  290: 
        -:  291:
        -:  292:  int newDeck[MAX_DECK];
     3064:  293:  int newDeckPos = 0;
        -:  294:  int card;
        -:  295:  int i;
        -:  296:
     3064:  297:  if (state->deckCount[player] < 1)
    #####:  298:    return -1;
     3064:  299:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  300:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  301:
    67408:  302:  while (state->deckCount[player] > 0) {
    30640:  303:    card = floor(Random() * state->deckCount[player]);
    30640:  304:    newDeck[newDeckPos] = state->deck[player][card];
    30640:  305:    newDeckPos++;
   199330:  306:    for (i = card; i < state->deckCount[player]-1; i++) {
    69025:  307:      state->deck[player][i] = state->deck[player][i+1];
    69025:  308:    }
    30640:  309:    state->deckCount[player]--;
        -:  310:  }
    67408:  311:  for (i = 0; i < newDeckPos; i++) {
    30640:  312:    state->deck[player][i] = newDeck[i];
    30640:  313:    state->deckCount[player]++;
    30640:  314:  }
        -:  315:
     3064:  316:  return 0;
     3064:  317:}
        -:  318:
        -:  319:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  320:{	
        -:  321:  int card;
    #####:  322:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  323:
        -:  324:  //check if it is the right phase
    #####:  325:  if (state->phase != 0)
        -:  326:    {
    #####:  327:      return -1;
        -:  328:    }
        -:  329:	
        -:  330:  //check if player has enough actions
    #####:  331:  if ( state->numActions < 1 )
        -:  332:    {
    #####:  333:      return -1;
        -:  334:    }
        -:  335:	
        -:  336:  //get card played
    #####:  337:  card = handCard(handPos, state);
        -:  338:	
        -:  339:  //check if selected card is an action
    #####:  340:  if ( card < adventurer || card > treasure_map )
        -:  341:    {
    #####:  342:      return -1;
        -:  343:    }
        -:  344:	
        -:  345:  //play card
    #####:  346:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  347:    {
    #####:  348:      return -1;
        -:  349:    }
        -:  350:	
        -:  351:  //reduce number of actions
    #####:  352:  state->numActions--;
        -:  353:
        -:  354:  //update coins (Treasure cards may be added with card draws)
    #####:  355:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  356:	
    #####:  357:  return 0;
    #####:  358:}
        -:  359:
        -:  360:int buyCard(int supplyPos, struct gameState *state) {
        -:  361:  int who;
        -:  362:  if (DEBUG){
        -:  363:    printf("Entering buyCard...\n");
        -:  364:  }
        -:  365:
        -:  366:  // I don't know what to do about the phase thing.
        -:  367:
    #####:  368:  who = state->whoseTurn;
        -:  369:
    #####:  370:  if (state->numBuys < 1){
        -:  371:    if (DEBUG)
        -:  372:      printf("You do not have any buys left\n");
    #####:  373:    return -1;
    #####:  374:  } else if (supplyCount(supplyPos, state) <1){
        -:  375:    if (DEBUG)
        -:  376:      printf("There are not any of that type of card left\n");
    #####:  377:    return -1;
    #####:  378:  } else if (state->coins < getCost(supplyPos)){
        -:  379:    if (DEBUG) 
        -:  380:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  381:    return -1;
        -:  382:  } else {
    #####:  383:    state->phase=1;
        -:  384:    //state->supplyCount[supplyPos]--;
    #####:  385:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  386:  
    #####:  387:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  388:    state->numBuys--;
        -:  389:    if (DEBUG)
        -:  390:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  391:  }
        -:  392:
        -:  393:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  394:  //state->discardCount[who]++;
        -:  395:    
    #####:  396:  return 0;
    #####:  397:}
        -:  398:
        -:  399:int numHandCards(struct gameState *state) {
       12:  400:  return state->handCount[ whoseTurn(state) ];
        -:  401:}
        -:  402:
        -:  403:int handCard(int handPos, struct gameState *state) {
        5:  404:  int currentPlayer = whoseTurn(state);
        5:  405:  return state->hand[currentPlayer][handPos];
        -:  406:}
        -:  407:
        -:  408:int supplyCount(int card, struct gameState *state) {
    #####:  409:  return state->supplyCount[card];
        -:  410:}
        -:  411:
        -:  412:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  413:  int i;
    #####:  414:  int count = 0;
        -:  415:
    #####:  416:  for (i = 0; i < state->deckCount[player]; i++)
        -:  417:    {
    #####:  418:      if (state->deck[player][i] == card) count++;
    #####:  419:    }
        -:  420:
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == card) count++;
    #####:  424:    }
        -:  425:
    #####:  426:  for (i = 0; i < state->discardCount[player]; i++)
        -:  427:    {
    #####:  428:      if (state->discard[player][i] == card) count++;
    #####:  429:    }
        -:  430:
    #####:  431:  return count;
        -:  432:}
        -:  433:
        -:  434:int whoseTurn(struct gameState *state) {
     3021:  435:  return state->whoseTurn;
        -:  436:}
        -:  437:
        -:  438:int endTurn(struct gameState *state) {
        -:  439:  int k;
        -:  440:  int i;
    #####:  441:  int currentPlayer = whoseTurn(state);
        -:  442:  
        -:  443:  //Discard hand
    #####:  444:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  445:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  446:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  447:  }
    #####:  448:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  449:    
        -:  450:  //Code for determining the player
    #####:  451:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  452:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  453:  }
        -:  454:  else{
    #####:  455:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  456:  }
        -:  457:
    #####:  458:  state->outpostPlayed = 0;
    #####:  459:  state->phase = 0;
    #####:  460:  state->numActions = 1;
    #####:  461:  state->coins = 0;
    #####:  462:  state->numBuys = 1;
    #####:  463:  state->playedCardCount = 0;
    #####:  464:  state->handCount[state->whoseTurn] = 0;
        -:  465:
        -:  466:  //int k; move to top
        -:  467:  //Next player draws hand
    #####:  468:  for (k = 0; k < 5; k++){
    #####:  469:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  470:  }
        -:  471:
        -:  472:  //Update money
    #####:  473:  updateCoins(state->whoseTurn, state , 0);
        -:  474:
    #####:  475:  return 0;
        -:  476:}
        -:  477:
        -:  478:int isGameOver(struct gameState *state) {
        -:  479:  int i;
        -:  480:  int j;
        -:  481:	
        -:  482:  //if stack of Province cards is empty, the game ends
    #####:  483:  if (state->supplyCount[province] == 0)
        -:  484:    {
    #####:  485:      return 1;
        -:  486:    }
        -:  487:
        -:  488:  //if three supply pile are at 0, the game ends
    #####:  489:  j = 0;
    #####:  490:  for (i = 0; i < 25; i++)
        -:  491:    {
    #####:  492:      if (state->supplyCount[i] == 0)
        -:  493:	{
    #####:  494:	  j++;
    #####:  495:	}
    #####:  496:    }
    #####:  497:  if ( j >= 3)
        -:  498:    {
    #####:  499:      return 1;
        -:  500:    }
        -:  501:
    #####:  502:  return 0;
    #####:  503:}
        -:  504:
        -:  505:int scoreFor (int player, struct gameState *state) {
        -:  506:
        -:  507:  int i;
    #####:  508:  int score = 0;
        -:  509:  //score from hand
    #####:  510:  for (i = 0; i < state->handCount[player]; i++)
        -:  511:    {
    #####:  512:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  513:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  514:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  515:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  516:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  517:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  518:    }
        -:  519:
        -:  520:  //score from discard
    #####:  521:  for (i = 0; i < state->discardCount[player]; i++)
        -:  522:    {
    #####:  523:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  524:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  525:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  526:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  527:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  528:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  529:    }
        -:  530:
        -:  531:  //score from deck
    #####:  532:  for (i = 0; i < state->discardCount[player]; i++)
        -:  533:    {
    #####:  534:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  535:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  536:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  537:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  538:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  539:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  540:    }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
        -:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  546:  int i;	
        -:  547:  int j;
        -:  548:  int highScore;
        -:  549:  int currentPlayer;
        -:  550:
        -:  551:  //get score for each player
    #####:  552:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  553:    {
        -:  554:      //set unused player scores to -9999
    #####:  555:      if (i >= state->numPlayers)
        -:  556:	{
    #####:  557:	  players[i] = -9999;
    #####:  558:	}
        -:  559:      else
        -:  560:	{
    #####:  561:	  players[i] = scoreFor (i, state);
        -:  562:	}
    #####:  563:    }
        -:  564:
        -:  565:  //find highest score
    #####:  566:  j = 0;
    #####:  567:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  568:    {
    #####:  569:      if (players[i] > players[j])
        -:  570:	{
    #####:  571:	  j = i;
    #####:  572:	}
    #####:  573:    }
    #####:  574:  highScore = players[j];
        -:  575:
        -:  576:  //add 1 to players who had less turns
    #####:  577:  currentPlayer = whoseTurn(state);
    #####:  578:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  579:    {
    #####:  580:      if ( players[i] == highScore && i > currentPlayer )
        -:  581:	{
    #####:  582:	  players[i]++;
    #####:  583:	}
    #####:  584:    }
        -:  585:
        -:  586:  //find new highest score
    #####:  587:  j = 0;
    #####:  588:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  589:    {
    #####:  590:      if ( players[i] > players[j] )
        -:  591:	{
    #####:  592:	  j = i;
    #####:  593:	}
    #####:  594:    }
    #####:  595:  highScore = players[j];
        -:  596:
        -:  597:  //set winners in array to 1 and rest to 0
    #####:  598:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  599:    {
    #####:  600:      if ( players[i] == highScore )
        -:  601:	{
    #####:  602:	  players[i] = 1;
    #####:  603:	}
        -:  604:      else
        -:  605:	{
    #####:  606:	  players[i] = 0;
        -:  607:	}
    #####:  608:    }
        -:  609:
    #####:  610:  return 0;
        -:  611:}
        -:  612:
        -:  613:int drawCard(int player, struct gameState *state)
        -:  614:{	int count;
        -:  615:  int deckCounter;
     6025:  616:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  617:    
        -:  618:    //Step 1 Shuffle the discard pile back into a deck
        -:  619:    int i;
        -:  620:    //Move discard to deck
    #####:  621:    for (i = 0; i < state->discardCount[player];i++){
    #####:  622:      state->deck[player][i] = state->discard[player][i];
    #####:  623:      state->discard[player][i] = -1;
    #####:  624:    }
        -:  625:
    #####:  626:    state->deckCount[player] = state->discardCount[player];
    #####:  627:    state->discardCount[player] = 0;//Reset discard
        -:  628:
        -:  629:    //Shufffle the deck
    #####:  630:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  631:   
        -:  632:    if (DEBUG){//Debug statements
        -:  633:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  634:    }
        -:  635:    
    #####:  636:    state->discardCount[player] = 0;
        -:  637:
        -:  638:    //Step 2 Draw Card
    #####:  639:    count = state->handCount[player];//Get current player's hand count
        -:  640:    
        -:  641:    if (DEBUG){//Debug statements
        -:  642:      printf("Current hand count: %d\n", count);
        -:  643:    }
        -:  644:    
    #####:  645:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  646:
    #####:  647:    if (deckCounter == 0)
    #####:  648:      return -1;
        -:  649:
    #####:  650:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  651:    state->deckCount[player]--;
    #####:  652:    state->handCount[player]++;//Increment hand count
    #####:  653:  }
        -:  654:
        -:  655:  else{
     6025:  656:    int count = state->handCount[player];//Get current hand count for player
        -:  657:    int deckCounter;
        -:  658:    if (DEBUG){//Debug statements
        -:  659:      printf("Current hand count: %d\n", count);
        -:  660:    }
        -:  661:
     6025:  662:    deckCounter = state->deckCount[player];//Create holder for the deck count
     6025:  663:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     6025:  664:    state->deckCount[player]--;
     6025:  665:    state->handCount[player]++;//Increment hand count
        -:  666:  }
        -:  667:
     6025:  668:  return 0;
     6025:  669:}
        -:  670:
        -:  671:int getCost(int cardNumber)
        -:  672:{
       10:  673:  switch( cardNumber ) 
        -:  674:    {
        -:  675:    case curse:
    #####:  676:      return 0;
        -:  677:    case estate:
    #####:  678:      return 2;
        -:  679:    case duchy:
    #####:  680:      return 5;
        -:  681:    case province:
    #####:  682:      return 8;
        -:  683:    case copper:
       10:  684:      return 0;
        -:  685:    case silver:
    #####:  686:      return 3;
        -:  687:    case gold:
    #####:  688:      return 6;
        -:  689:    case adventurer:
    #####:  690:      return 6;
        -:  691:    case council_room:
    #####:  692:      return 5;
        -:  693:    case feast:
    #####:  694:      return 4;
        -:  695:    case gardens:
    #####:  696:      return 4;
        -:  697:    case mine:
    #####:  698:      return 5;
        -:  699:    case remodel:
    #####:  700:      return 4;
        -:  701:    case smithy:
    #####:  702:      return 4;
        -:  703:    case village:
    #####:  704:      return 3;
        -:  705:    case baron:
    #####:  706:      return 4;
        -:  707:    case great_hall:
    #####:  708:      return 3;
        -:  709:    case minion:
    #####:  710:      return 5;
        -:  711:    case steward:
    #####:  712:      return 3;
        -:  713:    case tribute:
    #####:  714:      return 5;
        -:  715:    case ambassador:
    #####:  716:      return 3;
        -:  717:    case cutpurse:
    #####:  718:      return 4;
        -:  719:    case embargo: 
    #####:  720:      return 2;
        -:  721:    case outpost:
    #####:  722:      return 5;
        -:  723:    case salvager:
    #####:  724:      return 4;
        -:  725:    case sea_hag:
    #####:  726:      return 4;
        -:  727:    case treasure_map:
    #####:  728:      return 4;
        -:  729:    }
        -:  730:	
    #####:  731:  return -1;
       10:  732:}
        -:  733:
        -:  734:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  735:{
        -:  736:  int i;
        -:  737:  int j;
        -:  738:  int k;
        -:  739:  int x;
        -:  740:  int index;
     3004:  741:  int currentPlayer = whoseTurn(state);
     3004:  742:  int nextPlayer = currentPlayer + 1;
        -:  743:
     3004:  744:  int tributeRevealedCards[2] = {-1, -1};
        -:  745:  int temphand[MAX_HAND];// moved above the if statement
     3004:  746:  int drawntreasure=0;
        -:  747:  int cardDrawn;
     3004:  748:  int z = 0;// this is the counter for the temp hand
     3004:  749:  if (nextPlayer > (state->numPlayers - 1)){
      989:  750:    nextPlayer = 0;
      989:  751:  }
        -:  752:  
        -:  753:	
        -:  754:  //uses switch to select card and perform actions
     3004:  755:  switch( card ) 
        -:  756:    {
        -:  757:    case adventurer:
     1001:  758:		return adventurerEffect(state, currentPlayer, drawntreasure, cardDrawn, temphand, z);
        -:  759:			
        -:  760:    case council_room:
        -:  761:      //+4 Cards
    #####:  762:      for (i = 0; i < 4; i++)
        -:  763:	{
    #####:  764:	  drawCard(currentPlayer, state);
    #####:  765:	}
        -:  766:			
        -:  767:      //+1 Buy
    #####:  768:      state->numBuys++;
        -:  769:			
        -:  770:      //Each other player draws a card
    #####:  771:      for (i = 0; i < state->numPlayers; i++)
        -:  772:	{
    #####:  773:	  if ( i != currentPlayer )
        -:  774:	    {
    #####:  775:	      drawCard(i, state);
    #####:  776:	    }
    #####:  777:	}
        -:  778:			
        -:  779:      //put played card in played card pile
    #####:  780:      discardCard(handPos, currentPlayer, state, 0);
        -:  781:			
    #####:  782:      return 0;
        -:  783:			
        -:  784:    case feast:
        -:  785:      //gain card with cost up to 5
        -:  786:      //Backup hand
    #####:  787:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  788:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  789:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  790:      }
        -:  791:      //Backup hand
        -:  792:
        -:  793:      //Update Coins for Buy
    #####:  794:      updateCoins(currentPlayer, state, 5);
    #####:  795:      x = 1;//Condition to loop on
    #####:  796:      while( x == 1) {//Buy one card
    #####:  797:	if (supplyCount(choice1, state) <= 0){
        -:  798:	  if (DEBUG)
        -:  799:	    printf("None of that card left, sorry!\n");
        -:  800:
        -:  801:	  if (DEBUG){
        -:  802:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  803:	  }
    #####:  804:	}
    #####:  805:	else if (state->coins < getCost(choice1)){
    #####:  806:	  printf("That card is too expensive!\n");
        -:  807:
        -:  808:	  if (DEBUG){
        -:  809:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  810:	  }
    #####:  811:	}
        -:  812:	else{
        -:  813:
        -:  814:	  if (DEBUG){
        -:  815:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  816:	  }
        -:  817:
    #####:  818:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  819:	  x = 0;//No more buying cards
        -:  820:
        -:  821:	  if (DEBUG){
        -:  822:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  823:	  }
        -:  824:
        -:  825:	}
        -:  826:      }     
        -:  827:
        -:  828:      //Reset Hand
    #####:  829:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  830:	state->hand[currentPlayer][i] = temphand[i];
    #####:  831:	temphand[i] = -1;
    #####:  832:      }
        -:  833:      //Reset Hand
        -:  834:      			
    #####:  835:      return 0;
        -:  836:			
        -:  837:    case gardens:
    #####:  838:      return -1;
        -:  839:			
        -:  840:    case mine:
    #####:  841:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  842:
    #####:  843:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:		
    #####:  848:      if (choice2 > treasure_map || choice2 < curse)
        -:  849:	{
    #####:  850:	  return -1;
        -:  851:	}
        -:  852:
    #####:  853:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  854:	{
    #####:  855:	  return -1;
        -:  856:	}
        -:  857:
    #####:  858:      gainCard(choice2, state, 2, currentPlayer);
        -:  859:
        -:  860:      //discard card from hand
    #####:  861:      discardCard(handPos, currentPlayer, state, 0);
        -:  862:
        -:  863:      //discard trashed card
    #####:  864:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  865:	{
    #####:  866:	  if (state->hand[currentPlayer][i] == j)
        -:  867:	    {
    #####:  868:	      discardCard(i, currentPlayer, state, 0);			
    #####:  869:	      break;
        -:  870:	    }
    #####:  871:	}
        -:  872:			
    #####:  873:      return 0;
        -:  874:			
        -:  875:    case remodel:
    #####:  876:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  877:
    #####:  878:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  879:	{
    #####:  880:	  return -1;
        -:  881:	}
        -:  882:
    #####:  883:      gainCard(choice2, state, 0, currentPlayer);
        -:  884:
        -:  885:      //discard card from hand
    #####:  886:      discardCard(handPos, currentPlayer, state, 0);
        -:  887:
        -:  888:      //discard trashed card
    #####:  889:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  890:	{
    #####:  891:	  if (state->hand[currentPlayer][i] == j)
        -:  892:	    {
    #####:  893:	      discardCard(i, currentPlayer, state, 0);			
    #####:  894:	      break;
        -:  895:	    }
    #####:  896:	}
        -:  897:
        -:  898:
    #####:  899:      return 0;
        -:  900:		
        -:  901:    case smithy:
        1:  902:      	 return smithyEffect(state, currentPlayer, handPos);
        -:  903:		
        -:  904:    case village:
     1001:  905:		return villageEffect(state, currentPlayer, handPos);
        -:  906:		
        -:  907:    case baron:
    #####:  908:      state->numBuys++;//Increase buys by 1!
    #####:  909:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  910:	int p = 0;//Iterator for hand!
    #####:  911:	int card_not_discarded = 1;//Flag for discard set!
    #####:  912:	while(card_not_discarded){
    #####:  913:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  914:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  915:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  916:	    state->discardCount[currentPlayer]++;
    #####:  917:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  918:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  919:	    }
    #####:  920:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  921:	    state->handCount[currentPlayer]--;
    #####:  922:	    card_not_discarded = 0;//Exit the loop
    #####:  923:	  }
    #####:  924:	  else if (p > state->handCount[currentPlayer]){
        -:  925:	    if(DEBUG) {
        -:  926:	      printf("No estate cards in your hand, invalid choice\n");
        -:  927:	      printf("Must gain an estate if there are any\n");
        -:  928:	    }
    #####:  929:	    if (supplyCount(estate, state) > 0){
    #####:  930:	      gainCard(estate, state, 0, currentPlayer);
    #####:  931:	      state->supplyCount[estate]--;//Decrement estates
    #####:  932:	      if (supplyCount(estate, state) == 0){
    #####:  933:		isGameOver(state);
    #####:  934:	      }
    #####:  935:	    }
    #####:  936:	    card_not_discarded = 0;//Exit the loop
    #####:  937:	  }
        -:  938:			    
        -:  939:	  else{
    #####:  940:	    p++;//Next card
        -:  941:	  }
        -:  942:	}
    #####:  943:      }
        -:  944:			    
        -:  945:      else{
    #####:  946:	if (supplyCount(estate, state) > 0){
    #####:  947:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  948:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  949:	  if (supplyCount(estate, state) == 0){
    #####:  950:	    isGameOver(state);
    #####:  951:	  }
    #####:  952:	}
        -:  953:      }
        -:  954:	    
        -:  955:      
    #####:  956:      return 0;
        -:  957:		
        -:  958:    case great_hall:
        -:  959:      //+1 Card
    #####:  960:      drawCard(currentPlayer, state);
        -:  961:			
        -:  962:      //+1 Actions
    #####:  963:      state->numActions++;
        -:  964:			
        -:  965:      //discard card from hand
    #####:  966:      discardCard(handPos, currentPlayer, state, 0);
    #####:  967:      return 0;
        -:  968:		
        -:  969:    case minion:
        -:  970:      //+1 action
    #####:  971:      state->numActions++;
        -:  972:			
        -:  973:      //discard card from hand
    #####:  974:      discardCard(handPos, currentPlayer, state, 0);
        -:  975:			
    #####:  976:      if (choice1)		//+2 coins
        -:  977:	{
    #####:  978:	  state->coins = state->coins + 2;
    #####:  979:	}
        -:  980:			
    #####:  981:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  982:	{
        -:  983:	  //discard hand
    #####:  984:	  while(numHandCards(state) > 0)
        -:  985:	    {
    #####:  986:	      discardCard(handPos, currentPlayer, state, 0);
        -:  987:	    }
        -:  988:				
        -:  989:	  //draw 4
    #####:  990:	  for (i = 0; i < 4; i++)
        -:  991:	    {
    #####:  992:	      drawCard(currentPlayer, state);
    #####:  993:	    }
        -:  994:				
        -:  995:	  //other players discard hand and redraw if hand size > 4
    #####:  996:	  for (i = 0; i < state->numPlayers; i++)
        -:  997:	    {
    #####:  998:	      if (i != currentPlayer)
        -:  999:		{
    #####: 1000:		  if ( state->handCount[i] > 4 )
        -: 1001:		    {
        -: 1002:		      //discard hand
    #####: 1003:		      while( state->handCount[i] > 0 )
        -: 1004:			{
    #####: 1005:			  discardCard(handPos, i, state, 0);
        -: 1006:			}
        -: 1007:							
        -: 1008:		      //draw 4
    #####: 1009:		      for (j = 0; j < 4; j++)
        -: 1010:			{
    #####: 1011:			  drawCard(i, state);
    #####: 1012:			}
    #####: 1013:		    }
    #####: 1014:		}
    #####: 1015:	    }
        -: 1016:				
    #####: 1017:	}
    #####: 1018:      return 0;
        -: 1019:		
        -: 1020:    case steward:
    #####: 1021:      return stewardEffect(state, choice1, choice2, choice3, currentPlayer, handPos);
        -: 1022:		
        -: 1023:    case tribute:
    #####: 1024:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1025:	if (state->deckCount[nextPlayer] > 0){
    #####: 1026:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1027:	  state->deckCount[nextPlayer]--;
    #####: 1028:	}
    #####: 1029:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1030:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1031:	  state->discardCount[nextPlayer]--;
    #####: 1032:	}
        -: 1033:	else{
        -: 1034:	  //No Card to Reveal
        -: 1035:	  if (DEBUG){
        -: 1036:	    printf("No cards to reveal\n");
        -: 1037:	  }
        -: 1038:	}
    #####: 1039:      }
        -: 1040:	    
        -: 1041:      else{
    #####: 1042:	if (state->deckCount[nextPlayer] == 0){
    #####: 1043:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1044:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1045:	    state->deckCount[nextPlayer]++;
    #####: 1046:	    state->discard[nextPlayer][i] = -1;
    #####: 1047:	    state->discardCount[nextPlayer]--;
    #####: 1048:	  }
        -: 1049:			    
    #####: 1050:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1051:	} 
    #####: 1052:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1054:	state->deckCount[nextPlayer]--;
    #####: 1055:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1056:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1057:	state->deckCount[nextPlayer]--;
        -: 1058:      }    
        -: 1059:		       
    #####: 1060:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1061:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1062:	state->playedCardCount++;
    #####: 1063:	tributeRevealedCards[1] = -1;
    #####: 1064:      }
        -: 1065:
    #####: 1066:      for (i = 0; i <= 2; i ++){
    #####: 1067:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1068:	  state->coins += 2;
    #####: 1069:	}
        -: 1070:		    
    #####: 1071:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1072:	  drawCard(currentPlayer, state);
    #####: 1073:	  drawCard(currentPlayer, state);
    #####: 1074:	}
        -: 1075:	else{//Action Card
    #####: 1076:	  state->numActions = state->numActions + 2;
        -: 1077:	}
    #####: 1078:      }
        -: 1079:	    
    #####: 1080:      return 0;
        -: 1081:		
        -: 1082:    case ambassador:
    #####: 1083:      j = 0;		//used to check if player has enough cards to discard
        -: 1084:
    #####: 1085:      if (choice2 > 2 || choice2 < 0)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
    #####: 1090:      if (choice1 == handPos)
        -: 1091:	{
    #####: 1092:	  return -1;
        -: 1093:	}
        -: 1094:
    #####: 1095:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1096:	{
    #####: 1097:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1098:	    {
    #####: 1099:	      j++;
    #####: 1100:	    }
    #####: 1101:	}
    #####: 1102:      if (j < choice2)
        -: 1103:	{
    #####: 1104:	  return -1;				
        -: 1105:	}
        -: 1106:
        -: 1107:      if (DEBUG) 
        -: 1108:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1109:
        -: 1110:      //increase supply count for choosen card by amount being discarded
    #####: 1111:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1112:			
        -: 1113:      //each other player gains a copy of revealed card
    #####: 1114:      for (i = 0; i < state->numPlayers; i++)
        -: 1115:	{
    #####: 1116:	  if (i != currentPlayer)
        -: 1117:	    {
    #####: 1118:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1119:	    }
    #####: 1120:	}
        -: 1121:
        -: 1122:      //discard played card from hand
    #####: 1123:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1124:
        -: 1125:      //trash copies of cards returned to supply
    #####: 1126:      for (j = 0; j < choice2; j++)
        -: 1127:	{
    #####: 1128:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1129:	    {
    #####: 1130:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1131:		{
    #####: 1132:		  discardCard(i, currentPlayer, state, 1);
    #####: 1133:		  break;
        -: 1134:		}
    #####: 1135:	    }
    #####: 1136:	}			
        -: 1137:
    #####: 1138:      return 0;
        -: 1139:		
        -: 1140:    case cutpurse:
        -: 1141:
    #####: 1142:      updateCoins(currentPlayer, state, 2);
    #####: 1143:      for (i = 0; i < state->numPlayers; i++)
        -: 1144:	{
    #####: 1145:	  if (i != currentPlayer)
        -: 1146:	    {
    #####: 1147:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1148:		{
    #####: 1149:		  if (state->hand[i][j] == copper)
        -: 1150:		    {
    #####: 1151:		      discardCard(j, i, state, 0);
    #####: 1152:		      break;
        -: 1153:		    }
    #####: 1154:		  if (j == state->handCount[i])
        -: 1155:		    {
    #####: 1156:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1157:			{
        -: 1158:			  if (DEBUG)
        -: 1159:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1160:			}	
    #####: 1161:		      break;
        -: 1162:		    }		
    #####: 1163:		}
        -: 1164:					
    #####: 1165:	    }
        -: 1166:				
    #####: 1167:	}				
        -: 1168:
        -: 1169:      //discard played card from hand
    #####: 1170:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1171:
    #####: 1172:      return 0;
        -: 1173:
        -: 1174:		
        -: 1175:    case embargo: 
        -: 1176:      //+2 Coins
    #####: 1177:      state->coins = state->coins + 2;
        -: 1178:			
        -: 1179:      //see if selected pile is in play
    #####: 1180:      if ( state->supplyCount[choice1] == -1 )
        -: 1181:	{
    #####: 1182:	  return -1;
        -: 1183:	}
        -: 1184:			
        -: 1185:      //add embargo token to selected supply pile
    #####: 1186:      state->embargoTokens[choice1]++;
        -: 1187:			
        -: 1188:      //trash card
    #####: 1189:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1190:      return 0;
        -: 1191:		
        -: 1192:    case outpost:
     1001: 1193:      return outpostEffect(state, currentPlayer, handPos);
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
    #####: 1213:	if (i != currentPlayer){
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1217:	}
    #####: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
    #####: 1231:	}
    #####: 1232:      if (index > -1)
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
     3004: 1253:}
        -: 1254:
        -: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
     2003: 1259:  if (trashFlag < 1)
        -: 1260:    {
        -: 1261:      //add card to played pile
     1002: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1002: 1263:      state->playedCardCount++;
     1002: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
     2003: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
     2003: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
        5: 1273:      state->handCount[currentPlayer]--;
        5: 1274:    }
     1998: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
    #####: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
     1998: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
     1998: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
     1998: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
     2003: 1290:  return 0;
        -: 1291:}
        -: 1292:
        -: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1298:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:    {
    #####: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
    #####: 1308:  if (toFlag == 1)
        -: 1309:    {
    #####: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1311:      state->deckCount[player]++;
    #####: 1312:    }
    #####: 1313:  else if (toFlag == 2)
        -: 1314:    {
    #####: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1316:      state->handCount[player]++;
    #####: 1317:    }
        -: 1318:  else
        -: 1319:    {
    #####: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
    #####: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
    #####: 1327:  return 0;
    #####: 1328:}
        -: 1329:
        -: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
     1004: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
    12048: 1338:  for (i = 0; i < state->handCount[player]; i++)
        -: 1339:    {
     5020: 1340:      if (state->hand[player][i] == copper)
        -: 1341:	{
     4018: 1342:	  state->coins += 1;
     4018: 1343:	}
     1002: 1344:      else if (state->hand[player][i] == silver)
        -: 1345:	{
    #####: 1346:	  state->coins += 2;
    #####: 1347:	}
     1002: 1348:      else if (state->hand[player][i] == gold)
        -: 1349:	{
    #####: 1350:	  state->coins += 3;
    #####: 1351:	}
        -: 1352:		
     5020: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
     1004: 1356:  state->coins += bonus;
        -: 1357:
     1004: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361:
        -: 1362://end of dominion.c
        -: 1363:
